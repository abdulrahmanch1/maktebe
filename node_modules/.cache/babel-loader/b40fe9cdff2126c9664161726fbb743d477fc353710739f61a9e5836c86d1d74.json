{"ast":null,"code":"var _jsxFileName = \"/home/abdulrahman/maktaba/src/contexts/AuthContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState, useMemo } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext({\n  isLoggedIn: false,\n  user: null,\n  login: () => {},\n  logout: () => {}\n});\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n  const login = userData => {\n    setIsLoggedIn(true);\n    setUser(userData);\n    // In a real app, you would store token/user data in localStorage\n  };\n  const logout = () => {\n    setIsLoggedIn(false);\n    setUser(null);\n    // In a real app, you would clear token/user data from localStorage\n  };\n  const authContextValue = useMemo(() => ({\n    isLoggedIn,\n    user,\n    login,\n    logout\n  }), [isLoggedIn, user]);\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: authContextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"DbKPlDaiTmMyvCRBHiiJnGWs/GQ=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useMemo","jsxDEV","_jsxDEV","AuthContext","isLoggedIn","user","login","logout","AuthProvider","children","_s","setIsLoggedIn","setUser","userData","authContextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/abdulrahman/maktaba/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useMemo } from \"react\";\n\nexport const AuthContext = createContext({\n  isLoggedIn: false,\n  user: null,\n  login: () => {},\n  logout: () => {},\n});\n\nexport const AuthProvider = ({ children }) => {\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n  const [user, setUser] = useState(null);\n\n  const login = (userData) => {\n    setIsLoggedIn(true);\n    setUser(userData);\n    // In a real app, you would store token/user data in localStorage\n  };\n\n  const logout = () => {\n    setIsLoggedIn(false);\n    setUser(null);\n    // In a real app, you would clear token/user data from localStorage\n  };\n\n  const authContextValue = useMemo(\n    () => ({\n      isLoggedIn,\n      user,\n      login,\n      logout,\n    }),\n    [isLoggedIn, user]\n  );\n\n  return (\n    <AuthContext.Provider value={authContextValue}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,EAAEC,OAAO,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,OAAO,MAAMC,WAAW,gBAAGL,aAAa,CAAC;EACvCM,UAAU,EAAE,KAAK;EACjBC,IAAI,EAAE,IAAI;EACVC,KAAK,EAAEA,CAAA,KAAM,CAAC,CAAC;EACfC,MAAM,EAAEA,CAAA,KAAM,CAAC;AACjB,CAAC,CAAC;AAEF,OAAO,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C,MAAM,CAACN,UAAU,EAAEO,aAAa,CAAC,GAAGZ,QAAQ,CAAC,KAAK,CAAC;EACnD,MAAM,CAACM,IAAI,EAAEO,OAAO,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EAEtC,MAAMO,KAAK,GAAIO,QAAQ,IAAK;IAC1BF,aAAa,CAAC,IAAI,CAAC;IACnBC,OAAO,CAACC,QAAQ,CAAC;IACjB;EACF,CAAC;EAED,MAAMN,MAAM,GAAGA,CAAA,KAAM;IACnBI,aAAa,CAAC,KAAK,CAAC;IACpBC,OAAO,CAAC,IAAI,CAAC;IACb;EACF,CAAC;EAED,MAAME,gBAAgB,GAAGd,OAAO,CAC9B,OAAO;IACLI,UAAU;IACVC,IAAI;IACJC,KAAK;IACLC;EACF,CAAC,CAAC,EACF,CAACH,UAAU,EAAEC,IAAI,CACnB,CAAC;EAED,oBACEH,OAAA,CAACC,WAAW,CAACY,QAAQ;IAACC,KAAK,EAAEF,gBAAiB;IAAAL,QAAA,EAC3CA;EAAQ;IAAAQ,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACV,EAAA,CA/BWF,YAAY;AAAAa,EAAA,GAAZb,YAAY;AAAA,IAAAa,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}